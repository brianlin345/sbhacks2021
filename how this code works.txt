availableStats.py: Dictionary of available stats. Update if new stats are added
configureCWD.py: Sets current working directory relative to where program folder is located

***
createModel.py: Used to train, test, and create the model. Calling createModel() generates a model. 
	createModel(): 
		sets current working directory to /Data (contains csvs)
		reads csv
		perform logreg on the csv
		saves the model
	performLogReg(): 
		makes the column of features
		X = features
		y = result
		perform a 75/25 split, shuffle = True
		does the logreg model
		makes a confusion matrix for the predicted
		uses sklearn.metrics to print out scores
	saveModel():
		pickle.dump into /SavedModels
	createDataFrame(), getTrainingSet(), createMeanSDDicts(), daterange(), infoToDataFrame(), zScoreDifferential(): 
		only use if not reading from CSV for our model (which we will be 100% of the time)
***

customHeaders.py: Used to make requests seem like they're coming from browser
getDailyMatchups.py: 
	dailyMatchupPast(date, season):
		Function to get you the games on a specified date (Home vs. Away)
		Used for dates in the past
		Return value is a list where index 0 is a dict holding the games and index 1 is the result of the games
		Enter a date in the format mm/dd/yyyy and season in the format yyyy-yy
		Uses a loop to loop through all the games and prints the info
	dailyMatchupsPresent(date):
		Function to get you the games on a specified date (Home vs. Away)
		Used for dates in the present or future
		Return value is a list where index 0 is a dict holding the games  {Home:Away}
		Enter a date in the format mm/dd/yyyy

getStats.py: Obtains a grouping of stats for any team in the NBA
	Returns various stats for inputted team in a dictionary
	team should match team name in teamIds.py
	startDate and endDate should be in format 'mm/dd/yyyy'
	
	getStatsForTeam():
		Uses NBA_API to access the dictionary holding basic stats for every team per 100 possessions
		Returns Win PCT, Rebounds, Turnovers, and Plus Minus
		Uses NBA_API to access the dictionary holding advanced stats for every team
		Variables holding OFF Rating, DEF Rating, and TS%
		Puts all the stats for specified team into a dictionary

makePastPredictions.py: Used to predicts specified range of past NBA Games

nbaPredict.py: Predicts results of NBA games on a specified date
	Call makeInterpretPrediction with current date, season, and start date of season to run predictions
	Uses createMeanStandardDeviationDicts, zScoreDifferential from createModel
	Loads a model from /SavedModels and uses it to predict

standardizeStats.py - Uses Z Scores ((Obs  - Mean) / St Dev.) to standardize any of the different statistics scraped
teamIds.py - Dictionary holding stats.nba.com IDs for each NBA team


